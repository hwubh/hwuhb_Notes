# 以下部分均为可更改部分

from scipy.spatial import KDTree
from answer_task1 import *
from smooth_utils import *

class CharacterController():
    def __init__(self, controller) -> None:
        self.motions = []
        self.motions.append(BVHMotion('motion_material/kinematic_motion/long_walk.bvh'))
        self.controller = controller
        self.delta_time = 1. / 60.

        self.idle_motion = BVHMotion('motion_material/idle.bvh')
        self.idle = True

        self.pose_datasets = self.CreatePoseDatasets()
        self.feature_datasets = self.CreateFeatureDatasets()
        self.feature_kd_tree = KDTree(self.feature_datasets[0][:-60])

        self.feature_weight = np.ones(self.feature_datasets[0][0].shape)
        self.features_offset, self.features_scale = self.normalize_features()
        self.feature_kd_tree = KDTree(self.feature_datasets[0][:-60])

        self.first_time = True

        # 当前pose
        self.bone_positions = self.pose_vectors['joint_position'][self.cur_frame].copy()
        self.bone_rotations = self.pose_vectors['joint_rotation'][self.cur_frame].copy()
        self.bone_vels = self.pose_vectors['joint_velocity'][self.cur_frame].copy()
        self.bone_avels = self.pose_vectors['joint_avelocity'][self.cur_frame].copy()

        self.cur_frame = 0
        pass

    def CreatePoseDatasets(self):
        features = []
        for i in range(len(self.motions)):
            motion = self.motions[i]
            joint_translation, joint_orientation = motion.batch_forward_kinematics()
            pose_vector = {
                'joint_position': motion.joint_position,
                'joint_rotation': motion.joint_rotation,
                'joint_velocity': Inertializer.compute_velocity(joint_translation, joint_orientation, self.dt),
                'joint_avelocity': Inertializer.compute_angular_velocity(motion.joint_rotation, self.dt),
            }
            features.append(pose_vector)
        return features

    def CreateFeatureDatasets(self):
        features = []
        for i in range(len(self.motions)):
            motion = self.motions[i]
            temp_motion_features = np.zeros([motion.motion_length, 27])
            joint_name = motion.joint_name
            joint_translation, joint_orientation = motion.batch_forward_kinematics()
            for j in range(motion.motion_length):
                cur_orientation_inv = R.from_quat(joint_orientation[j, 0, :]).inv()
                if j < motion.motion_length - 60:
                    temp_motion_features[j, 0:2] = cur_orientation_inv.apply(joint_translation[j + 20, 0, :] - joint_translation[j, 0, :])[[0, 2]]
                    temp_motion_features[j, 2:4] = cur_orientation_inv.apply(joint_translation[j + 40, 0, :] - joint_translation[j, 0, :])[[0, 2]]
                    temp_motion_features[j, 4:6] = cur_orientation_inv.apply(joint_translation[j + 60, 0, :] - joint_translation[j, 0, :])[[0, 2]]

                    temp_motion_features[j, 6:  8] = cur_orientation_inv.apply(R.from_quat(joint_orientation[j + 20, 0, :]).apply(np.array([0.,0.,1.])))[[0,2]]
                    temp_motion_features[j, 8: 10] = cur_orientation_inv.apply(R.from_quat(joint_orientation[j + 40, 0, :]).apply(np.array([0.,0.,1.])))[[0,2]]
                    temp_motion_features[j, 10:12] = cur_orientation_inv.apply(R.from_quat(joint_orientation[j + 60, 0, :]).apply(np.array([0.,0.,1.])))[[0,2]]

                temp_motion_features[j, 12:15] = cur_orientation_inv.apply(joint_translation[j, joint_name.index('rAnkle'), :] - joint_translation[j, 0, :])
                temp_motion_features[j, 15:18] = cur_orientation_inv.apply(joint_translation[j, joint_name.index('lAnkle'), :] - joint_translation[j, 0, :])

                if j != 0:
                    dt = self.delta_time
                    temp_motion_features[j, 18:21] = cur_orientation_inv.apply((joint_translation[j, joint_name.index('RootJoint'), :] - joint_translation[j - 1, joint_name.index('RootJoint'), :]) / dt)

                    temp_motion_features[j, 21:24] = cur_orientation_inv.apply((joint_translation[j, joint_name.index('rAnkle'), :] - joint_translation[j - 1, joint_name.index('rAnkle'), :]) / dt) - temp_motion_features[i, 18:21]
                    temp_motion_features[j, 24:27] = cur_orientation_inv.apply((joint_translation[j, joint_name.index('lAnkle'), :] - joint_translation[j - 1, joint_name.index('lAnkle'), :]) / dt) - temp_motion_features[i, 18:21]
                features.append(temp_motion_features)
        return features
            
    
    def update_state(self, 
                     desired_pos_list, 
                     desired_rot_list,
                     desired_vel_list,
                     desired_avel_list,
                     current_gait
                     ):
        '''
        此接口会被用于获取新的期望状态
        Input: 平滑过的手柄输入,包含了现在(第0帧)和未来20,40,60,80,100帧的期望状态,以及一个额外输入的步态
        简单起见你可以先忽略步态输入,它是用来控制走路还是跑步的
            desired_pos_list: 期望位置, 6x3的矩阵, 每一行对应0，20，40...帧的期望位置(水平)， 期望位置可以用来拟合根节点位置也可以是质心位置或其他
            desired_rot_list: 期望旋转, 6x4的矩阵, 每一行对应0，20，40...帧的期望旋转(水平), 期望旋转可以用来拟合根节点旋转也可以是其他
            desired_vel_list: 期望速度, 6x3的矩阵, 每一行对应0，20，40...帧的期望速度(水平), 期望速度可以用来拟合根节点速度也可以是其他
            desired_avel_list: 期望角速度, 6x3的矩阵, 每一行对应0，20，40...帧的期望角速度(水平), 期望角速度可以用来拟合根节点角速度也可以是其他
        
        Output: 同作业一,输出下一帧的关节名字,关节位置,关节旋转
            joint_name: List[str], 代表了所有关节的名字
            joint_translation: np.ndarray，形状为(M, 3)的numpy数组，包含着所有关节的全局位置
            joint_orientation: np.ndarray，形状为(M, 4)的numpy数组，包含着所有关节的全局旋转(四元数)
        Tips:
            输出三者顺序需要对应
            controller 本身有一个move_speed属性,是形状(3,)的ndarray,
            分别对应着面朝向移动速度,侧向移动速度和向后移动速度.目前根据LAFAN的统计数据设为(1.75,1.5,1.25)
            如果和你的角色动作速度对不上,你可以在init或这里对属性进行修改
        '''
        # 一个简单的例子，输出第i帧的状态
        if self.first_time is True:
            self.first_frame = False
            self.bone_positions[0][0] = desired_pos_list[0][0]
            self.bone_positions[0][2] = desired_pos_list[0][2]

        root_position = self.bone_positions[0]
        root_rotation = self.bone_rotations[0]
        root_rotation_inv = R.from_quat(root_rotation).inv()

        cur_feature_vector = np.zeros([27])
        cur_feature_vector[0:2] = root_rotation_inv.apply(desired_pos_list[1] - root_position)[[0, 2]]
        cur_feature_vector[2:4] = root_rotation_inv.apply(desired_pos_list[2] - root_position)[[0, 2]]
        cur_feature_vector[4:6] = root_rotation_inv.apply(desired_pos_list[3] - root_position)[[0, 2]]

        cur_feature_vector[6:  8] = root_rotation_inv.apply(R.from_quat(desired_rot_list[1]).apply(np.array([0.,0.,1.])))[[0,2]]
        cur_feature_vector[8: 10] = root_rotation_inv.apply(R.from_quat(desired_rot_list[2]).apply(np.array([0.,0.,1.])))[[0,2]]
        cur_feature_vector[10:12] = root_rotation_inv.apply(R.from_quat(desired_rot_list[3]).apply(np.array([0.,0.,1.])))[[0,2]]
        # normalize tarjectory feature
        cur_feature_vector[:12] = np.divide(cur_feature_vector[:12] - self.features_offset[:12], self.features_scale[:12])

        joint_name = self.motions[0].joint_name
        joint_translation, joint_orientation = self.motions[0].batch_forward_kinematics()
        joint_translation = joint_translation[0]
        joint_orientation = joint_orientation[0]
        
        return joint_name, joint_translation, joint_orientation
    
    
    def sync_controller_and_character(self, controller, character_state):
        '''
        这一部分用于同步你的角色和手柄的状态
        更新后很有可能会出现手柄和角色的位置不一致，这里可以用于修正
        让手柄位置服从你的角色? 让角色位置服从手柄? 或者插值折中一下?
        需要你进行取舍
        Input: 手柄对象，角色状态
        手柄对象我们提供了set_pos和set_rot接口,输入分别是3维向量和四元数,会提取水平分量来设置手柄的位置和旋转
        角色状态实际上是一个tuple, (joint_name, joint_translation, joint_orientation),为你在update_state中返回的三个值
        你可以更新他们,并返回一个新的角色状态
        '''
        
        # 一个简单的例子，将手柄的位置与角色对齐
        # controller.set_pos(self.cur_root_pos)
        # controller.set_rot(self.cur_root_rot)
        
        return character_state
    # 你的其他代码,state matchine, motion matching, learning, etc.